1)

http://localhost:8000/posts/123
null

1a)
http://localhost:8000/posts/my-first-posts#
My Blog Post!
my first post

2)
http://localhost:8000/posts/my-second-posts#
Trying to get property 'body' of non-object (View: C:\dev\best\back\laravel\laracasts\laravel6\resources\views\post.blade.php)

a)
- solved
        if (!$post){
            abort(404);
        }
b)
//$post = DB::table('posts')->where('slug', $slug)->first();
$post = Post::where('slug', $slug)->first();

        if (!$post){
            abort(404);
        }

return view('post', [
            'post' => $post;
        ]);
    }

c)
    public function show($slug)
    {
        return view('post', [
            'post' => $post = Post::where('slug', $slug)->firstOrFail()
        ]);
    }


3) Migration 101
C:\dev\best\back\laravel\laracasts\laravel6>php artisan make:migration create_posts_table
Created Migration: 2020_04_18_092440_create_posts_table


a)
- nic nie dzieje się w bazie danych a jedynie zostaje utworzony klasa CreatePostsTable.
php artisan make:migration create_posts_table


    use Illuminate\Database\Migrations\Migration;
    use Illuminate\Database\Schema\Blueprint;
    use Illuminate\Support\Facades\Schema;

    class CreatePostsTable extends Migration
    {
        /**
         * Run the migrations.
         *
         * @return void
         */
        public function up()
        {
            Schema::create('posts', function (Blueprint $table) {
                $table->id();
                $table->timestamps();
            });
        }

        /**
         * Reverse the migrations.
         *
         * @return void
         */
        public function down()
        {
            Schema::dropIfExists('posts');
        }
    }


b)
php artisan migrate
- migracje zostały użyte do utworzenia tabel w bazie danych


c)
C:\dev\best\back\laravel\laracasts\laravel6>php artisan make:migration add_title_to_posts_table
Created Migration: 2020_04_18_094758_add_title_to_posts_table
- tworzymy kolejną migracje która doda nam tytuł do tabeli post.


d)
php artisan migrate
- title zostało dodane do tabeli posts jako ostatnia pozycja.


e)
ale czy tego nie dało zrobić się lepiej ?
php artisan migrate:rollback
Rolled back:  2020_04_18_094758_add_title_to_posts_table (0.02 seconds)
- wywaliliśmy wiec z powrotem  pole title z tabeli posts.

f)
- kasujemy więc migracje która tylko dodawała tytuł do tabeli post.
- następnie do migracji która tworzyła tabele post, dodaje brakujący tytuł.

BEFORE:
 public function up()
    {
        Schema::create('posts', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('slug');
            $table->text('body');
            $table->timestamps();
            $table->timestamp('published_ad')->nullable();
        });
    }


AFTER:
    public function up()
    {
        Schema::create('posts', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('slug');
            $table->string('title');
            $table->text('body');
            $table->timestamps();
            $table->timestamp('published_ad')->nullable();
        });
    }


g)
- teraz komenda php artisan migrate, nie zadziała: Nothing to migrate.
solve1: !!(utracimy wszystkie dane z tej tabeli)
    php artisan migrate:roleback
    php artisan migrate


solve2: (utracimy dane we wszystkich tabelach)
 php artisan migrate:fresh


3)
- tworzymy za jednym razem model, migracje i kontroler.
C:\dev\best\back\laravel\laracasts\laravel6>php artisan make:model Project -mc
Model created successfully.
Created Migration: 2020_04_18_102658_create_projects_table
Controller created successfully.


4)
C:\dev\best\back\laravel\laracasts\laravel6>php artisan tinker

a)
php artisan tinker

Psy Shell v0.10.3 (PHP 7.4.4 — cli) by Justin Hileman
>>> $assignment = new App\Assignment;
=> App\Assignment {#3014}
>>> $assignment->body = 'Fish school work';
=> "Fish school work"
>>> $assignment->save();
=> true
>>>

PHPMYADMIN:
id body             completed     created_at               updated_at         du
1 Fish school work      0           2020-04-18 1 1:02:112  020-04-18 11:02:11 NULL


b)
>>> App\Assignment::all();
=> Illuminate\Database\Eloquent\Collection {#3023
     all: [
       App\Assignment {#3024
         id: 1,
         body: "Fish school work",
         completed: 0,
         created_at: "2020-04-18 11:02:11",
         updated_at: "2020-04-18 11:02:11",
         due_date: null,
       },
     ],
   }
>>>

c)
>>> App\Assignment::first();
=> App\Assignment {#3027
     id: 1,
     body: "Fish school work",
     completed: 0,
     created_at: "2020-04-18 11:02:11",
     updated_at: "2020-04-18 11:02:11",
     due_date: null,
   }
>>>

d)
>>> App\Assignment::where('completed', false)->get()
=> Illuminate\Database\Eloquent\Collection {#3023
     all: [
       App\Assignment {#3019
         id: 1,
         body: "Fish school work",
         completed: 0,
         created_at: "2020-04-18 11:02:11",
         updated_at: "2020-04-18 11:02:11",
         due_date: null,
       },
     ],
   }
>>>

e)
class Assignment extends Model{}
>>> $assigment->complete();
PHP Notice:  Undefined variable: assigment in Psy Shell code on line 1
PHP Error:  Call to a member function complete() on null in Psy Shell code on line 1

use Illuminate\Database\Eloquent\Model;

f)
class Assignment extends Model{ public function complete(){ $this->completed = true; $this->save();}}
>>> $assignment =  App\Assignment::first()
=> App\Assignment {#3025
     id: 1,
     body: "Fish school work",
     completed: 0,
     created_at: "2020-04-18 11:02:11",
     updated_at: "2020-04-18 11:02:11",
     due_date: null,
   }
>>>

g)
>>> $assignment->complete();
=> null
>>>


h)
>>> $assignment =  App\Assignment::first()
=> App\Assignment {#3027
     id: 1,
     body: "Fish school work",
     completed: 1,
     created_at: "2020-04-18 11:02:11",
     updated_at: "2020-04-18 11:20:02",
     due_date: null,
   }
>>>

5) VIEVS
a)
welcome.blade.php
@extends('layout')

@section('content')
    treść
@endsection

b)
layout.blade.php
<body>
    @yield('content')
</body>


c)
Route::get('/contact',  function (){
    return view('contact') ;
});
http://localhost:8000/contact
View [contact] not found.
create new file contact.blade.php


e)
contact.blade.php
@extends('layout')

@section('content')
    <h1>Hello World!</h1>
@endsection


f)
https://templated.co/simplework
- ściągamy przykładową templatkę i montujemy do naszego laravela.
- po rozpakowaniu wszystko poza plikiem index kopiujemy do pliku public laravela.
- otwieramy plik index w notatniku a zawartość kopiujemy do naszego layoutu.
- mamay super tapetę na szaszej stronie.































