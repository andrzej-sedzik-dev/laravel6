CONTROLLER -TECHNICS


1)
    public function show($id)
    {
        // show a single resource.

        $article = Article::findOrFail($id);
        return $article;
        return view('articles.show', ['article' => $article]);
    }

1a)
- bijemy od razu do przeglądarki.
http://localhost:8000/articles/1
{
id: 1,
    title: "Getting to Knowu us UPDATE",
    excerpt: "Lorem ipsum to roboczy tekst używany do celów projektowych, zwykle do prezentacji kroju pisma, kompozycji, układu kolumn, wyglądu składu, typografii itd. Większość tekstów niesie ze sobą swoje znaczenie, które narzuca odbiorcy wpływ na ocenę wyglądu. Lorem ipsum nie przekazuje bezpośredniej treści, jest ambiwalentny, pozwalając tym samym skupić się odbiorcy wyłącznie na wyglądzie. Za pomocą tego generatora możesz stworzyć tekst z losowo rozłożonych wyrazów, który wygląda na gramatycznie poprawny, ale jego znaczenie jest zupełnie abstrakcyjne co pozwala na interpretację tekstu wyłącznie jako znaków graficznych, graficznej kompozycji złożonej z liter.",
    body: "Lorem Ipsum jest tekstem stosowanym jako przykładowy wypełniacz w przemyśle poligraficznym. Został po raz pierwszy użyty w XV w. przez nieznanego drukarza do wypełnienia tekstem próbnej książki. Pięć wieków później zaczął być używany przemyśle elektronicznym, pozostając praktycznie niezmienionym. Spopularyzował się w latach 60. XX w. wraz z publikacją arkuszy Letrasetu, zawierających fragmenty Lorem Ipsum, a ostatnio z zawierającym różne wersje Lorem Ipsum oprogramowaniem przeznaczonym do realizacji druków na komputerach osobistych, jak Aldus PageMaker",
    created_at: "2020-04-18T16:25:13.000000Z",
    updated_at: "2020-04-19T15:08:38.000000Z"
}

2)
- dostajemy tę samą wartość a nie musimy przygotowywac zapytania.

    public function show(Article $article)
    {
        // show a single resource.
        //$article = Article::findOrFail($id);

        return $article;
        return view('articles.show', ['article' => $article]);
    }

http://localhost:8000/articles/1
{
id: 1,
    title: "Getting to Knowu us UPDATE",
    excerpt: "Lorem ipsum to roboczy tekst używany do celów projektowych, zwykle do prezentacji kroju pisma, kompozycji, układu kolumn, wyglądu składu, typografii itd. Większość tekstów niesie ze sobą swoje znaczenie, które narzuca odbiorcy wpływ na ocenę wyglądu. Lorem ipsum nie przekazuje bezpośredniej treści, jest ambiwalentny, pozwalając tym samym skupić się odbiorcy wyłącznie na wyglądzie. Za pomocą tego generatora możesz stworzyć tekst z losowo rozłożonych wyrazów, który wygląda na gramatycznie poprawny, ale jego znaczenie jest zupełnie abstrakcyjne co pozwala na interpretację tekstu wyłącznie jako znaków graficznych, graficznej kompozycji złożonej z liter.",
    body: "Lorem Ipsum jest tekstem stosowanym jako przykładowy wypełniacz w przemyśle poligraficznym. Został po raz pierwszy użyty w XV w. przez nieznanego drukarza do wypełnienia tekstem próbnej książki. Pięć wieków później zaczął być używany przemyśle elektronicznym, pozostając praktycznie niezmienionym. Spopularyzował się w latach 60. XX w. wraz z publikacją arkuszy Letrasetu, zawierających fragmenty Lorem Ipsum, a ostatnio z zawierającym różne wersje Lorem Ipsum oprogramowaniem przeznaczonym do realizacji druków na komputerach osobistych, jak Aldus PageMaker",
    created_at: "2020-04-18T16:25:13.000000Z",
    updated_at: "2020-04-19T15:08:38.000000Z"
}

3)
- nadal trybi choć tym razem przekazujemy do widoku.

    public function show(Article $article)
    {
        // show a single resource.
        // $article = Article::findOrFail($id);
        // return $article;

        return view('articles.show', ['article' => $article]);
    }

3a)
Laravel działa tak:
Chcesz artydkuł o id = $article (pobiera sobie) i zwarac pierwszą wartość.

Route::get('/articles/{article}', 'ArticlesController@show');
public function show(Article $article)
Article:where('id', 1)->first();
WORK - OK

Route::get('/articles/{inna}', 'ArticlesController@show');
NOT - WORK (so routing is importand).


3b)
Route::get('/articles/{inna}', 'ArticlesController@show');
public function show(Article $inna )
WORK - OK

4)
SLUG (kebab case).
http://localhost:8000/articles/getting-tu-as

a)
class Article extends Model
{
    public function getRouteKeyName()
    {
        return 'slug'; // Article:where('slug', $article)->first();
    }

}



5)

http://localhost:8000/articles/create
- mamy pewne błędy nie możmy wysłać po zmianie.
Add [title] to fillable property to allow mass assignment on [App\Article].
- błąd ten oznacza że nieznany parametr został przekazany do requsta.


    public  function store()
    {
        // Persit the new resource (przechwytauje dane z formularzea create)

        request()->validate([
            'title' => 'required',
            'excerpt' => 'required',
            'body' => 'required'
        ]);


/*
        $article = new Article();
        $article->title = request('title');
        $article->excerpt = request('excerpt');
        $article->body = request('body');
        $article->save();
*/


        Article::create([
            'title' => request('title'),
            'excerpt' => request('excerpt'),
            'body' => request('body')
    ]);



        return redirect('/articles');

    }


6)
- teraz działa.
- $guarded -> godzimy się na wszystkie pola.


class Article extends Model
{
    protected $fillable = ['title', 'excerpt', 'body'] ; //User::create(request()->all() // ['name' => 'newname', 'subscriber' => true];
    protected $guarded = [];

}

7) pozbywamy się duplikacji.

BEFORE:

    public  function store()
    {
        // Persit the new resource (przechwytauje dane z formularzea create)

        request()->validate([
            'title' => 'required',
            'excerpt' => 'required',
            'body' => 'required'
        ]);

        Article::create([
            'title' => request('title'),
            'excerpt' => request('excerpt'),
            'body' => request('body')
    ]);

AFTER:
- możemy to bardzo uprościć do takiego stanu:

        $validatedAttributes = request()->validate([
            'title' => 'required',
            'excerpt' => 'required',
            'body' => 'required'
        ]);


        Article::create($validatedAttributes);


8)
zmianay w metodzie update.

BEFORE:

    public  function update(Article $article)
    {
        // Persist the edited resource.

        request()->validate([
            'title' => 'required',
            'excerpt' => 'required',
            'body' => 'required'
        ]);

        //$article = Article::find($id);
        $article->title = request('title');
        $article->excerpt = request('excerpt');
        $article->body = request('body');
        $article->save();

        return redirect('/articles/' . $article->id);
    }


AFTER:
    public  function update(Article $article)
    {
        // Persist the edited resource.

        $article->update(request()->validate([
            'title' => 'required',
            'excerpt' => 'required',
            'body' => 'required'
        ]));

        return redirect('/articles/' . $article->id);
    }

9)
Zaznacz prawy Refactor/to a method

    /**
     * @return array
     */
    public function validateArticle(): array
    {
        return request()->validate([
            'title' => 'required',
            'excerpt' => 'required',
            'body' => 'required'
        ]);
    }

9a)
update();
$article->update($this->validateArticle());


9b)
store();
$validatedAttributes = $this->validateArticle();
Article::create($validatedAttributes);


10)
Consider named routes:
Route::get('/articles/{article}', 'ArticlesController@show');
Route::get('/articles/{article}', 'ArticlesController@show')->name('articles.show');

